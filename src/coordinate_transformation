''' Function _coor_trans '''

'''
Converts between cartesian and fractional coordinates

Input:
    opt: 
        String
        Option to declare the type of transformation.
        Available values:
            'c_to_f': Converting from cartesian to fractional   
            'f_to_c': Converting from fractional to cartesian
    
    pos: 
        Float array 
        Dimension (n,3) (n = the number of particles)
        The input positions
        
    v:   
        Float array
        Dimension (3)
        The unit cell vector lengths
    
    a:   
        Float array
        Dimension (3)
        The unit cell vector angles in degrees  
        
Output:
    p:   
        Float array
        Dimension (n,3) (n = the number of particles)
        The transformed positions.
'''

import numba as nb
import numpy as np

@nb.jit(nopython=True)
def _coor_trans(opt,pos,v,a):
    # Calculate cos and sin of cell angles 
    cos_a = np.cos(a*np.pi/180.0)
    sin_a = np.sin(a*np.pi/180.0)
    
    # Calculate the volume of the unit cell 
    vol = np.prod(v)*np.sqrt(1.0-np.sum(cos_a**2)+2.0*np.prod(cos_a))
    
    # Setting the transformation matrix 
    m = np.zeros((3,3),dtype=np.float_)
    if (opt == 'c_to_f'):
        # Converting from cartesian to fractional 
        m[0,0] =  1.0/v[0]
        m[0,1] = -cos_a[2]/v[0]/sin_a[2]
        m[0,2] =  v[1]*v[2]*(cos_a[0]*cos_a[2]-cos_a[1])/vol/sin_a[2]
        m[1,1] =  1.0/v[1]/sin_a[2]
        m[1,2] =  v[0]*v[2]*(cos_a[1]*cos_a[2]-cos_a[0])/vol/sin_a[2]
        m[2,2] =  v[0]*v[1]*sin_a[2]/vol
    elif (opt == 'f_to_c'):
        # Converting from fractional to cartesian 
        m[0,0] =  v[0]
        m[0,1] =  v[1]*cos_a[2]
        m[0,2] =  v[2]*cos_a[1]
        m[1,1] =  v[1]*sin_a[2]
        m[1,2] =  v[2]*(cos_a[0]-cos_a[1]*cos_a[2])/sin_a[2]
        m[2,2] =  vol/v[0]/v[1]/sin_a[2]
    
    # Transform coordinates
    p = np.transpose(np.dot(m,np.transpose(pos)))
    return p
